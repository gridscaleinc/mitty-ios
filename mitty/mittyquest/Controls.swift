//
//  Abstracts.swift
//  mitty
//
//  Created by gridscale on 2017/03/04.
//  Copyright © 2017年 GridScale Inc. All rights reserved.
//

import Foundation
import UIKit


// Abstract class that modeling a tree structure
protocol Node : class {
    var name : String {get}
    var view : UIView {get}
    var children : [Control] { get }
    var parent : Node? { get set}
    var elderSibling : Node? {get}
    var youngerSibling : Node? {get}
}

//
//
open class Control : NSObject, Node, Operatable {

    private var _name : String = ""
    internal var _parent: Node?
    
    internal var _view: UIView
    
    open var margin = ControlMargin()
    
    // properties
    var name : String { return _name }
    
    var view: UIView { return _view }
    
    var parent: Node? {
        get { return _parent}
        set (p) {
            _parent = p
        }
    }
    
    internal var children : [Control] = []
    
    // construct a default named control
    public init(view: UIView) {
        self._view = view
        if (view.tag == 0) {
            view.tag = nextTag()
        }
        _name = "Node#" + String(view.tag)
    }
    
    //
    public init(name: String, view v: UIView) {
        _name = name
        if (v.tag == 0) {
            v.tag = nextTag()
        }
        self._view = v
        super.init()
        ControlManager.append(self)
    }
    
    public convenience init(name: String) {
        self.init(name: name, view: UIView())
    }
    
    public convenience override init() {
        self.init(name: "", view: UIView())
        self._name = "AutoGenerated#\(_view.tag)"
    }
    
    var elderSibling : Node? {
        if (_parent != nil) {
            let siblings = _parent?.children
            
            if let indexOfMe = siblings?.index(of: self) {
                return siblings?[(siblings?.index(before: indexOfMe))!]
            }
        }
        return nil
    }
    
    var youngerSibling : Node? {
        if (_parent != nil) {
            let siblings = _parent?.children
            
            if let indexOfMe = siblings?.index(of: self) {
                return siblings?[(siblings?.index(after: indexOfMe))!]
            }
        }
        return nil
    }
    
    private var delegators : [EventDelegator] = []
    
    private var layoutCoders : [LayoutCoder] = []
    
    static public func ==(lhs: Control, rhs: Control) -> Bool {
        return lhs._name == rhs._name
        
    }
    
    // Make it conform to Hashable
    override open var hashValue: Int {
        return _name.hashValue
    }
    
    /*
     Make it conform to Operatable protocol
     registration Layout coder
     */
    @discardableResult
    func layout(_ coder: @escaping LayoutCoder) -> Self {
        // not duplicatedly
        self.layoutCoders.append(coder)
        return self
    }
    
    /*
     Make it conform to Operatable protocol
     call operation future in background thread
     */
    @discardableResult
    func future(_ operation: @escaping (Operatable) -> Void, _ completion: (()->Void)? ) -> Self {
        // Call by async
        let queue = OperationQueue()
        queue.addOperation() {
            operation(self as! Operatable)
            // Async callback
            let callback = completion
            if callback != nil {
                OperationQueue.main.addOperation() {
                    callback!()
                }
            }
        }
        return self
        
    }
    
    var src = SRC()
    
    /*
     Make it conform to Operatable protocol
     register event handler here
     */
    @discardableResult
    func event(_ event: UIControlEvents, _ handler: @escaping EventHandler) -> Self {

        let delegator = ControlEventDelegator()
        delegators.append(delegator)
        
        delegator.startDelegate(event, self, handler)
        src.add(o: delegator)
        
        return self
    }
    
    //
    func configLayout () {
        for code in layoutCoders {
            code(self)
        }
    }
    
}

class ControlSRC: SRC  {
    weak var cached: Control?
    
    init(c: Control) {
        cached = c
    }
    
    func isEmpty() -> Bool {
        return cached == nil
    }
}

class ControlManager {
 
    static var instance = ControlManager()
    
    //
    subscript (view:UIView) -> Control? {
        return controlViewMap[view.tag]?.cached
    }
    
    static func lookup(_ view: UIView) -> Control? {
        if (instance.controlViewMap.count>1000)  {
            future() {
                instance.cleaning()
            }
        }
        return instance[view]
    }
    
    static func append(_ control: Control) {
        let src = instance.controlViewMap[control.view.tag]
        if (src == nil) {
            instance.newControlSRC(control)
        }
        if (instance.controlViewMap.count>1000)  {
            future() {
                instance.cleaning()
            }
        }
    }
    
    var controlViewMap : [Int:ControlSRC] = [:]
    
    func newControlSRC(_ c: Control) {
        let newSrc = ControlSRC(c: c)
        c.src = newSrc
        controlViewMap[c.view.tag] = newSrc
    }
    var busy = false
    func cleaning () {
        if busy {
            return
        }
        print(controlViewMap.count)
        busy = true
        for key in controlViewMap.keys {
            let src = controlViewMap[key]
            if src!.isEmpty() {
                controlViewMap.removeValue(forKey: key)
            }
        }
        busy = false
    }
    
    static func retrieveOrCreateControl (linkedTo view: UIView) -> Control {
        let control = lookup(view)
        if (control != nil) {
            return control!
        }
        return Control(view: view)
    }
    
    static func future(_ operation: @escaping () -> Void) -> Void {
        // Call by async
        let queue = OperationQueue()
        queue.addOperation() {
            operation()

        }
    }
}
