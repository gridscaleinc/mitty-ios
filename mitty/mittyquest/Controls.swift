//
//  Abstracts.swift
//  mitty
//
//  Created by gridscale on 2017/03/04.
//  Copyright © 2017年 GridScale Inc. All rights reserved.
//

import Foundation
import UIKit



protocol Bindable1 {
    
}

// Protocol of object that Operateable
// by layout, event registeration, and Async excution
protocol Operatable {
    func layout(_ coder: @escaping LayoutCoder) -> Self
    func event(_ id: FormEvent, _ handler: @escaping EventHandler) -> Self
    func future(_ operation: @escaping (Operatable) -> Void, _ completion: (()->Void)?) -> Self
}

typealias ControlSelector = (Control1) -> Bool

// name, tag, path
protocol Selectable {
    
    subscript (_ named: String)-> OperationSet { get }
    
    func select(_ selector: ControlSelector ) -> OperationSet
}

typealias  EventHandler = (_ view: UIView) -> Void

typealias LayoutCoder = (_ c: Control1) ->Void

typealias Validator = (_ c: Control1 ) -> Void

typealias Conditionor = (_ c: Control1 ) -> Bool

typealias ControlOperation = (_ c: Control1 ) -> Void

enum FormEvent {
    case onTap
    case onChanged
    case onEditEnded
    case onFocus
}

// Abstract class that modeling a tree structure
protocol Node : class {
    var name : String {get}
    var view : UIView {get}
    var children : [Control1] { get }
    var parent : Node? { get set}
    var elderSibling : Node? {get}
    var youngerSibling : Node? {get}
}

//
//
open class Control1 : NSObject, Node, Operatable {
    
    private var _name : String = ""
    internal var _parent: Node?
    
    internal var _view: UIView
    
    open var margin = ControlMargin()
    
    // properties
    var name : String { return _name }
    
    var view: UIView { return _view }
    
    var parent: Node? {
        get { return _parent}
        set (p) {
            _parent = p
        }
    }
    
    internal var children : [Control1] = []
    
    // construct a default named control
    public init(view: UIView) {
        self._view = view
        if (view.tag == 0) {
            view.tag = nextTag()
        }
        _name = "Node#" + String(view.tag)
    }
    
    //
    public init(name: String, view v: UIView) {
        _name = name
        if (v.tag == 0) {
            v.tag = nextTag()
        }
        self._view = v
    }
    
    public convenience init(name: String) {
        self.init(name: name, view: UIView())
    }
    
    public convenience override init() {
        self.init(name: "", view: UIView())
        self._name = "AutoGenerated#\(_view.tag)"
    }
    
    var elderSibling : Node? {
        if (_parent != nil) {
            let siblings = _parent?.children
            
            if let indexOfMe = siblings?.index(of: self) {
                return siblings?[(siblings?.index(before: indexOfMe))!]
            }
        }
        return nil
    }
    
    var youngerSibling : Node? {
        if (_parent != nil) {
            let siblings = _parent?.children
            
            if let indexOfMe = siblings?.index(of: self) {
                return siblings?[(siblings?.index(after: indexOfMe))!]
            }
        }
        return nil
    }
    
    var handlers : [FormEvent: EventHandler] = [:]
    private var layoutCoders : [LayoutCoder] = []
    
    static public func ==(lhs: Control1, rhs: Control1) -> Bool {
        return lhs._name == rhs._name
        
    }
    
    // Make it conform to Hashable
    override open var hashValue: Int {
        return _name.hashValue
    }
    
    /*
     Make it conform to Operatable protocol
     registration Layout coder
     */
    @discardableResult
    func layout(_ coder: @escaping LayoutCoder) -> Self {
        // not duplicatedly
        self.layoutCoders.append(coder)
        return self
    }
    
    /*
     Make it conform to Operatable protocol
     call operation future in background thread
     */
    @discardableResult
    func future(_ operation: @escaping (Operatable) -> Void, _ completion: (()->Void)? ) -> Self {
        // Call by async
        let queue = OperationQueue()
        queue.addOperation() {
            operation(self as! Operatable)
            // Async callback
            let callback = completion
            if callback != nil {
                OperationQueue.main.addOperation() {
                    callback!()
                }
            }
        }
        return self
        
    }
    
    /*
     Make it conform to Operatable protocol
     register event handler here
     */
    @discardableResult
    func event(_ id: FormEvent, _ handler: @escaping EventHandler) -> Self {
        handlers[id] = handler
        return self
    }
    
    //
    func configLayout () {
        for code in layoutCoders {
            code(self)
        }
    }
}



//
//
//
protocol EventDispatcher {
    func dispatch(_ id: FormEvent, view: UIView)
}

protocol UIControlEventsDispatcher {
    func dispatch(_ event: UIControlEvents, view: UIView)
}

